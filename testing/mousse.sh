#!/bin/bash
# Copyright (c) 2020 TrussLab@University of California, Irvine. 
# Authors: Hsin-Wei Hung <hsinweih@uci.edu>
# All rights reserved.
#
# This document is shared under the GNU Free Documentation License WITHOUT ANY WARRANTY. See https://www.gnu.org/licenses/ for details.
#
target_lib_dir=/system/lib
mousse_work_dir=/data/local/mousse
mousse_devices=devices.txt
mousse_config=s2e-config.lua
android_id_file="android_id.txt"
mousse_executor_script=execute.sh
mousse_root=~/Mousse
mousse_deps=${mousse_root}/mousse_dependencies
mousse_build=${mousse_root}/mousse_build
parallel_opts="--no-notice --line-buffer --tag -q"
# Default Options
devices=""
device_idx=""
target_work_dir=""
target_run_dir=""
auto_restart='0'
update_mousse=false
setup_mousse=false
kill_mousse=false
run_mousse=true
clean_log=false
start_server=false
reboot=false

libraries="$mousse_deps/sysroot/usr/lib/libgthread-2.0.so
           $mousse_deps/sysroot/usr/lib/libglib-2.0.so
           $mousse_deps/sysroot/usr/lib/libintl.so.8.1.2
           $mousse_deps/sysroot/usr/lib/libiconv.so
           $mousse_build/llvm-debug/lib/libLTO.so"

update_files="$mousse_build/qemu-debug/arm-linux-user/qemu-arm
              $mousse_build/libs2e-debug/arm-s2e-softmmu/libs2e.so
              $mousse_build/libs2e-debug/arm-s2e-softmmu/op_helper.bc.arm"

run_files="$mousse_config
           library.lua
           ./audio_provider_scripts/start_audio_server.sh
           ./audio_provider_scripts/start_audio_app.sh
           $mousse_executor_script
           $mousse_build/mousse_server_build/executor"

print_usage() {
  run_mousse=false
  echo ""
  echo "Usage: mousse.sh <options> <test_program_name*>"
  echo "Options:"
  echo "-a, --auto-restart:     automatically restart another mousse instance when finish"
  echo "-c, --clean-log:        cleanup log files and reboot devices"
  echo "-d, --device=<n>:       specify device"
  echo "-o, --workdir=<name>:   specify target work directory, follow the format as target_XXX"
  echo "-i, --invoke=<script>:  invoke another script with device id(s) as the first argument"
  echo "-k, --kill              kill any qemu-arm instance"
  echo "-S, --start-server:     start server"
  echo "-s, --setup:            setup and push basic libraries required by mousse"
  echo "-u, --update:           update the mousse binary and libaray"
  echo ""
}

gen_id_file() {
  echo "$1" > $android_id_file
  adb -s $1 push $android_id_file $target_run_dir
  rm $android_id_file
}

gen_execute_sh() {
    echo "# auto-generated by mousse.sh" > $mousse_executor_script
    echo "cd ${target_run_dir} && LIBCPU_LOG_LEVEL= S2E_SHARED_DIR=${target_run_dir} S2E_CONFIG=${mousse_config} S2E_MAX_PROCESSES=16 LD_PRELOAD=${target_run_dir}/libs2e.so ${target_run_dir}/qemu-arm \$1 \$2 \$3" >> $mousse_executor_script
    chmod +x $mousse_executor_script
}

check_and_start_server() {
    if [ "$(ps aux | grep -c "mousse_server $port")" -gt 1 ]; then
      echo "A mousse server instance is already running on port $port"
      echo "Do you wish to restart/continue/quit? (r/c/q)"
      read server_action
      if [ $server_action = "r" ]; then
        start_server=true
        mousse_server_pid=($(ps aux | grep "mousse_server $port" | awk '{print $2}'))
        screen -S ${mousse_server_pid[0]} -X quit
      elif [ $server_action = "c" ]; then
        start_server=false
      elif [ $server_action = "q" ]; then
        exit 0
      else
        echo "quit: invalid action"
        exit 0
      fi
    else
      start_server=true
    fi
    
    if [ "$start_server" = true ]; then
      screen -d -m $mousse_build/mousse_server_build/mousse_server $port $target_work_dir
    fi
    
    mkdir -p $target_work_dir
    mkdir -p ${target_work_dir}/basic_blocks
}


while test $# -gt 0
do
  case "$1" in
    -a|--auto-restart) auto_restart='1' ;;
    -c|--clean-log) clean_log=true ;;
    -d|--device)
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        device_idx=$2; shift
      else
        echo "-d <n>, device index, n, should be a number"
        exit 0
      fi ;;
    -o|--workdir)
      if [[ "$2" =~ ^target_.* ]]; then
        target_work_dir=$2;
        target_run_dir=${mousse_work_dir}/${2}; shift
      else
        echo "-o <name>, target work directory, follow the format as target_XXX"
        exit 0
      fi ;;
    -i|--invoke)
      if [ -e "$2" ]; then
        invoke_script=$2; shift
      else
        echo "-i <script>, script $2 does not exist"
        exit 0
      fi ;;
    -k|--kill) kill_mousse=true ;;
    -S|--start-server) start_server=true ;;
    -s|--setup) setup_mousse=true ;;
    -u|--update) update_mousse=true ;;
    -h|--help) print_usage ;;
    *) break ;;
  esac
  shift
done

if [ "$target_run_dir" = "" ]; then
  echo "quit: no target work directory specified, use -o option"
  exit -1
fi

gen_execute_sh

# Check device list
if [ -e "$mousse_devices" ]; then
  local_idx=0
  echo "Devices:"
  while read device; do
    if [[ $device != \#* ]]; then
      (( local_idx++ ))
      if [[ $device_idx != "" && $device_idx != $local_idx ]]; then
        continue
      fi
      if [[ $(adb devices | grep $device | grep -o device) = "device" ]]; then
        echo -e "$local_idx\t$device"
        devices="$device $devices"
      else
        echo -e "$local_idx\t$device not found"
      fi
    fi
  done <$mousse_devices
else
  echo "quit: device list $mousse_devices not found"
  exit 0
fi

d=($devices)
total_devices=${#d[@]}
if [ $total_devices = 0 ]; then
  echo "quit: none of the devices specified are available"
  exit -1
fi

# Invoke the script if specified
if [ ! -z "$invoke_script" ]; then
  if [ $total_devices = 1 ]; then
    source $invoke_script $devices
    exit 0
  else
    parallel $parallel_opts source $invoke_script {} ::: $devices
    exit 0
  fi
fi

# Clean logs and reboot
if [ "$clean_log" = true ]; then
  parallel $parallel_opts adb -s {} shell "rm -r $target_run_dir/s2e-out*" ::: $devices
  parallel $parallel_opts adb -s {} reboot ::: $devices
  echo "Rebooting devices..."
  parallel $parallel_opts adb -s {} wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 3; done; input keyevent 82' ::: $devices
  parallel $parallel_opts adb -s {} root ::: $devices
  exit 0
fi

# Get port number from the configuration file
if [ -e "$mousse_config" ]; then
  port=$(grep '^[\t ]*portNum[\t ]*=[\t ]*[0-9]*[\t ]*,' $mousse_config | grep -o '[0-9]*')
  echo "Port: $port"
else
  echo "quit: mousse configuration $mousse_config not found"
  exit 0
fi

# Get reboot settig from the configuration file
if [ -e "$mousse_config" ]; then
  reboot=$(grep '^[\t ]*rebootAfterTerminate[\t ]*=[\t ]false\|^[\t ]*rebootAfterTerminate[\t ]*=[\t ]true' $mousse_config | grep -o 'false\|true')
  echo "Reboot: $reboot"
else
  echo "quit: mousse configuration $mousse_config not found"
  exit 0
fi
# Set test program
if [ ! $1 = "" ]; then
  test_program=$1
else
  test_program=""
fi

# Check test program
test_program_exist="true"
if [ ! "$test_program" = "" ]; then
  echo "Test program:"
  for device in $devices; do
    if [[ ! `adb -s $device shell ls $test_program 2> /dev/null` ]]; then
      echo "cannot find binary $test_program on $device"
      test_program_exist="false"
    fi
  done
  if [ "$test_program_exist" = true ]; then
    echo "using $test_program on devices"
  else
    run_mousse=false
  fi
else
  if [[ "$setup_mousse" = false && "$update_mousse" = false ]]; then
    echo "will not run mousse since test binary is not set"
  fi
  run_mousse=false
fi

for device in $devices
do
  adb -s $device root
  if [ "$setup_mousse" = true ]; then
    echo "Setting up MOUSSE on $device"
    run_mousse=false
    adb -s $device remount
    adb -s $device shell "mkdir -p $mousse_work_dir"
    adb -s $device shell "mkdir -p $target_run_dir"
    for file in $libraries; do
      adb -s $device push --sync $file $target_lib_dir
    done
    adb -s $device shell "mv $target_lib_dir/libintl.so.8.1.2 $target_lib_dir/libintl.so.8"
    for file in $update_files; do
      adb -s $device push --sync $file $target_run_dir
    done
  fi
  if [ "$update_mousse" = true ]; then
    echo "Upadting MOUSSE on $device"
    adb -s $device shell "mkdir -p $mousse_work_dir" 
    adb -s $device shell "mkdir -p $target_run_dir"
    for file in $update_files; do
      adb -s $device push --sync $file $target_run_dir
    done
  fi
  if [ "$kill_mousse" = true ]; then
    adb -s $device shell "pkill -f qemu-arm"
  fi
  if [ "$run_mousse" = true ]; then
    adb -s $device reverse tcp:$port tcp:$port
    for file in $run_files; do
      adb -s $device push --sync $file $target_run_dir
    done
  fi
  gen_id_file "$device"
done

if [[ "$run_mousse" = true || "$start_server" = true ]]; then
  check_and_start_server
fi

if [ "$run_mousse" = true ]; then
  while true
  do
    if [ "$reboot" = true ]; then
      echo "Rebooting devices..."
      adb -s $device reboot
      adb -s $device wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 3; done; input keyevent 82'
    fi
    adb -s $device shell "rm -r $target_run_dir/s2e-out*"
    adb -s $device reverse tcp:$port tcp:$port
    adb -s $device shell "cd $target_run_dir && ./executor $auto_restart $test_program"
  done
fi

